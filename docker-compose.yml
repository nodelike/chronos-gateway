version: '3.8'

services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    hostname: kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net

  kafka-setup:
    image: bitnami/kafka:3.7
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts/setup-topics.sh:/setup-topics.sh
    entrypoint: ["/bin/bash", "/setup-topics.sh"]
    restart: on-failure:3
    networks:
      - kafka-net

  chronos-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chronos-gateway
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      - GIN_MODE=release
    volumes:
      - ./configs:/app/configs
      - ./storage:/app/storage
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net
    command: ["./chronos-gateway"]

networks:
  kafka-net:
    driver: bridge

volumes:
  kafka_data: 